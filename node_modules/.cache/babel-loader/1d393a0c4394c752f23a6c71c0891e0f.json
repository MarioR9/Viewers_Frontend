{"ast":null,"code":"var _jsxFileName = \"/Users/macone/Development/newTest/Viewers_Frontend/src/Components/Views.js\";\nimport React from 'react';\nimport { Form, Button } from 'react-bootstrap';\nimport swal from 'sweetalert2';\nexport default class Viewers extends React.Component {\n  //state will store plataform, channel and num of viewers\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = () => {\n      const data = {\n        server: \"active\"\n      };\n      console.log(data);\n      const options = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      };\n      fetch(`https://viewersbackend.herokuapp.com/api2`, options).then(resp => resp.json()).then(data => () => {\n        this.setState({\n          server: \"active\"\n        });\n        swal.fire(data.status);\n      }).catch(err => {\n        // Error handling\n        console.log(\"Error Reading data \" + err);\n      });\n    };\n\n    this.handleRequest = () => {\n      this.handleChannelPreview();\n      this.setState({\n        status: false\n      });\n      const data = {\n        website: this.state.channel,\n        numOfViewers: this.state.numOfViewers,\n        status: \"active\"\n      };\n      console.log(data);\n      const options = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      };\n      fetch(`https://viewersbackend.herokuapp.com/api`, options).then(resp => resp.json()).then(data => {\n        swal.fire(data.status);\n      }).catch(err => {\n        // Error handling\n        console.log(\"Error Reading data \" + err);\n      });\n    };\n\n    this.handleStatusState = () => {\n      const data = {\n        website: this.state.channel,\n        numOfViewers: this.state.numOfViewers,\n        status: \"close\"\n      };\n      console.log(data);\n      this.setState({\n        status: true\n      });\n      const options = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      };\n      fetch(`https://viewersbackend.herokuapp.com/api`, options).then(resp => resp.json()).then(data => {\n        swal.fire(data.status);\n      }).catch(err => {\n        // Error handling\n        console.log(\"Error Reading data \" + err);\n      });\n    };\n\n    this.handleChannelPreview = () => {\n      //check if channel is youtube or facebook and return the correct url for embeding.\n      if (this.state.channel.includes(\"facebook\")) {\n        let newLink = this.state.channel.split(\"/\");\n        this.setState({\n          url: `https://www.facebook.com/plugins/video.php?href=https%3A%2F%2Fwww.facebook.com%2F${newLink[3]}%2Fvideos%2F${newLink[5]}%2F&show_text=false&width=734&appId=807760243060402&height=414`\n        });\n        return this.state.url;\n      } else {\n        this.setState({\n          url: this.state.channel.replace(\"watch?v=\", \"embed/\")\n        });\n        return this.state.url;\n      }\n    };\n\n    this.state = {\n      channel: '',\n      numOfViewers: 0,\n      status: true,\n      url: '',\n      server: 'notActive'\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Form-Container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"iframe\", {\n      title: \"preview\",\n      src: this.state.url,\n      width: \"560\",\n      height: \"315\",\n      scrolling: \"no\",\n      frameBorder: \"0\",\n      allowFullScreen: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"holder\",\n      style: \"position: relative\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 10\n      }\n    }, /*#__PURE__*/React.createElement(\"iframe\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 6\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"overlay\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 6\n      }\n    }, \"My overlay\")), /*#__PURE__*/React.createElement(Form.Label, {\n      style: {\n        color: \"white\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }\n    }, \"Enter Channel Website\"), /*#__PURE__*/React.createElement(Form.Control, {\n      onChange: e => {\n        this.setState({\n          channel: e.currentTarget.value\n        });\n      },\n      type: \"text\",\n      placeholder: \"https://www.twitch.tv/user\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Form.Text, {\n      className: \"text-muted\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }\n    }, \"This process is for testing only.\"), /*#__PURE__*/React.createElement(Form.Label, {\n      style: {\n        color: \"white\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }\n    }, \"Desired Number of Viewers\"), /*#__PURE__*/React.createElement(Form.Control, {\n      onChange: e => {\n        this.setState({\n          numOfViewers: e.currentTarget.value\n        });\n      },\n      type: \"text\",\n      placeholder: \"Number of Viewers\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }\n    }), this.state.status === false ? /*#__PURE__*/React.createElement(Button, {\n      onClick: this.handleStatusState,\n      variant: \"danger\",\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }\n    }, \"Stop\") : /*#__PURE__*/React.createElement(Button, {\n      onClick: this.handleRequest,\n      variant: \"success\",\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 11\n      }\n    }, \" Send\"))));\n  }\n\n}","map":{"version":3,"sources":["/Users/macone/Development/newTest/Viewers_Frontend/src/Components/Views.js"],"names":["React","Form","Button","swal","Viewers","Component","constructor","props","componentDidMount","data","server","console","log","options","method","headers","body","JSON","stringify","fetch","then","resp","json","setState","fire","status","catch","err","handleRequest","handleChannelPreview","website","state","channel","numOfViewers","handleStatusState","includes","newLink","split","url","replace","render","color","e","currentTarget","value"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Form, Button } from 'react-bootstrap';\nimport swal from 'sweetalert2';\n\nexport default class Viewers extends React.Component{\n  //state will store plataform, channel and num of viewers\n  constructor(props) {\n    super(props);\n    this.state = {channel: '',\n                  numOfViewers: 0,\n                  status: true,\n                  url: '',\n                  server: 'notActive'\n                  }\n  }\n  componentDidMount=()=>{\n    const data = {server: \"active\"}\n    console.log(data)\n    const options = {\n      method: 'POST',\n      headers : { \n        'Content-Type': 'application/json',\n       },\n      body: JSON.stringify(data),\n    }\n    fetch(`https://viewersbackend.herokuapp.com/api2`, options)\n    .then(resp=>resp.json())\n    .then(data => ()=> {\n      this.setState({server: \"active\"})\n      swal.fire(data.status)\n    })\n\n    .catch(err => {\n      // Error handling\n      console.log(\"Error Reading data \" + err);\n    });\n  }\n//handlers for request to start and stop viewing.\n  handleRequest=()=>{\n    this.handleChannelPreview()\n    this.setState({status: false})\n    const data = {website: this.state.channel, numOfViewers: this.state.numOfViewers, status: \"active\"}\n    console.log(data)\n    const options = {\n      method: 'POST',\n      headers : { \n        'Content-Type': 'application/json',\n       },\n      body: JSON.stringify(data),\n    }\n    fetch(`https://viewersbackend.herokuapp.com/api`, options)\n    .then(resp=>resp.json())\n    .then(data => {swal.fire(data.status)})\n\n    .catch(err => {\n      // Error handling\n      console.log(\"Error Reading data \" + err);\n    });\n\n  }\n  handleStatusState=()=>{\n    const data = {website: this.state.channel, numOfViewers: this.state.numOfViewers, status: \"close\"}\n    console.log(data)\n    this.setState({status: true})\n    const options = {\n      method: 'POST',\n      headers : { \n        'Content-Type': 'application/json',\n       },\n      body: JSON.stringify(data),\n    }\n    fetch(`https://viewersbackend.herokuapp.com/api`, options)\n    .then(resp=>resp.json())\n    .then(data => {swal.fire(data.status)})\n\n    .catch(err => {\n      // Error handling\n      console.log(\"Error Reading data \" + err);\n    });\n  }\n  handleChannelPreview=()=>{ //check if channel is youtube or facebook and return the correct url for embeding.\n    if(this.state.channel.includes(\"facebook\")){\n      let newLink = this.state.channel.split(\"/\")\n        this.setState({url:`https://www.facebook.com/plugins/video.php?href=https%3A%2F%2Fwww.facebook.com%2F${newLink[3]}%2Fvideos%2F${newLink[5]}%2F&show_text=false&width=734&appId=807760243060402&height=414`})\n      return this.state.url\n    }else{\n      this.setState({url: this.state.channel.replace(\"watch?v=\",\"embed/\")})\n      return this.state.url\n    }\n  }\n  \n \n  render(){\n    return(\n      <div>\n        <div className=\"Form-Container\">\n        <div>\n        <iframe \n         title=\"preview\"\n         src={this.state.url}\n         width=\"560\" \n         height=\"315\" \n         scrolling=\"no\" \n         frameBorder=\"0\" \n         allowFullScreen></iframe>\n         <div id=\"holder\" style=\"position: relative\">\n     <iframe />\n     <div id=\"overlay\">My overlay</div>\n    </div>\n          {/* CHannel or webiste not determine yet. Could have a drop down menu instead with main streaming platforms */}\n          <Form.Label style={{color: \"white\"}}>Enter Channel Website</Form.Label>\n          <Form.Control onChange={(e)=>{this.setState({ channel: e.currentTarget.value })}} type=\"text\" placeholder=\"https://www.twitch.tv/user\"/>\n          <Form.Text className=\"text-muted\">\n            This process is for testing only.\n          </Form.Text>\n          <Form.Label style={{color: \"white\"}}>Desired Number of Viewers</Form.Label>\n          <Form.Control onChange={(e)=>{this.setState({ numOfViewers: e.currentTarget.value })}} type=\"text\" placeholder=\"Number of Viewers\" />\n          {this.state.status === false ?\n          <Button onClick={this.handleStatusState} variant=\"danger\" type=\"submit\">Stop</Button>\n          :\n          <Button onClick={this.handleRequest} variant=\"success\" type=\"submit\"> Send</Button>\n          }\n        </div>\n       \n          \n      </div>\n      </div>\n      \n    )\n  }\n}\n\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}